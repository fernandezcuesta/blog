Title: Sharing a VPN session with iptables
Published: true
Location: Santander, ES
Tags: iptables, linux, networking, security

Sometimes it may happen that we need to share the connection to a remote system
with another person who cannot connect directly.
In order to move on, there are quite a few options. 

- Using a shared tmux session while the connection is established, which
requires the other person to feel comfortable with tmux.
- Setting up an SSH server on my laptop with a limited guest user account.
- Setting up a VPN to my system.
- Setting up *a couple* of **iptables** rules.

On this article I'll describe **last option**.

For completeness, let's summarize the components in the game:

- VPN session is established from my laptop, which has a private IP address
behind a NAT (actually behind 2 NATs, which is not relevant).
- Broadband router has a dynamically assigned public IP provided by my ISP.
- There already exist a port range forwarded from the router straight to my
laptop both for UDP and TCP.

So at the end the details (as an example) are:

- My public IP: 1.1.1.1
- Assigned IP address from the VPN tunnel: 10.200.100.5
- Remote system reachable from the IPSec tunnel: 10.200.0.1
- Open port: 50000

Having a look at iptables flowchart, we may figure out what we need to do by
following the lefter side of the chart.

<br />
![iptables flowchart](http://i.imgur.com/M4coXIl.png)
<br />


- PREROUTING rule on NAT table to translate incoming connections on port 50000
to the remote system port 22 (SSH).

        :::zsh
        iptables -t nat -A PREROUTING -p tcp --dport 50000 -j DNAT --to 10.200.0.1:22

- FORWARD rule to allow this traffic flow between interfaces (eth0 and tun0).

        :::zsh
        iptables -I FORWARD -p tcp --dst 10.200.0.1 --dport 22 -j ACCEPT
        iptables -I FORWARD -p tcp --src 10.200.0.1 --sport 22 -j ACCEPT

    This also needs the kernel to allow IP forwarding, so we must check:

        :::bash
        if [ $(cat /proc/sys/net/ipv4/ip_forward) = 0 ]; then sudo sysctl -w net.ipv4.ip_forward=1 ;fi

- POSTROUTING rule on NAT table to masquerade the source address of outgoing
traffic.

        :::zsh
        iptables -t nat -A POSTROUTING -d 10.200.0.1 -p tcp --dport 22 -j SNAT --to-source 10.200.100.5

With these rules in place the other person can simply access the remote system
with:

```zsh
ssh username@1.1.1.1 -p 50000
```


